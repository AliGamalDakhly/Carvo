<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>